[
  {
    "id": "basic-1",
    "question": "What is JavaScript?",
    "answer": "JavaScript is a high-level, interpreted programming language that is primarily used for creating interactive web pages and web applications. It was originally designed to run in web browsers, but now it can also run on servers (Node.js) and in other environments. JavaScript is dynamically typed, supports object-oriented programming, and is essential for front-end web development."
  },
  {
    "id": "basic-2",
    "question": "What are the different data types in JavaScript?",
    "answer": "JavaScript has two categories of data types:\n\n**Primitive Data Types:**\n1. Number - Represents both integers and floating-point numbers\n2. String - Represents textual data\n3. Boolean - Represents true or false\n4. Undefined - Represents a variable that has been declared but not assigned a value\n5. Null - Represents an intentional absence of value\n6. Symbol (ES6) - Represents a unique identifier\n7. BigInt (ES2020) - Represents integers with arbitrary precision\n\n**Non-primitive Data Type:**\n8. Object - Represents a collection of key-value pairs (includes arrays, functions, dates, etc.)\n\n```javascript\nlet num = 42;           // Number\nlet str = \"Hello\";      // String\nlet bool = true;        // Boolean\nlet undef;              // Undefined\nlet empty = null;       // Null\nlet sym = Symbol('id'); // Symbol\nlet big = 123n;         // BigInt\nlet obj = {name: 'John'}; // Object\n```"
  },
  {
    "id": "basic-3",
    "question": "What is the difference between let, const, and var?",
    "answer": "**var:**\n- Function-scoped or globally-scoped\n- Can be redeclared and updated\n- Hoisted and initialized with undefined\n- Can be accessed before declaration (returns undefined)\n\n**let:**\n- Block-scoped\n- Cannot be redeclared in the same scope\n- Can be updated\n- Hoisted but not initialized (Temporal Dead Zone)\n\n**const:**\n- Block-scoped\n- Cannot be redeclared or updated\n- Must be initialized at declaration\n- Hoisted but not initialized (Temporal Dead Zone)\n\n```javascript\n// var example\nfunction example() {\n  if (true) {\n    var x = 1;\n  }\n  console.log(x); // 1 (accessible outside block)\n}\n\n// let example\nfunction example2() {\n  if (true) {\n    let y = 1;\n  }\n  console.log(y); // ReferenceError: y is not defined\n}\n\n// const example\nconst z = 1;\nz = 2; // TypeError: Assignment to constant variable\n```"
  },
  {
    "id": "basic-4",
    "question": "What are JavaScript functions and how do you declare them?",
    "answer": "Functions in JavaScript are reusable blocks of code that perform specific tasks. There are several ways to declare functions:\n\n**1. Function Declaration:**\n```javascript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n```\n\n**2. Function Expression:**\n```javascript\nconst greet = function(name) {\n  return `Hello, ${name}!`;\n};\n```\n\n**3. Arrow Function (ES6):**\n```javascript\nconst greet = (name) => {\n  return `Hello, ${name}!`;\n};\n\n// Or shorter syntax for single expression\nconst greet = name => `Hello, ${name}!`;\n```\n\n**4. Function Constructor (rarely used):**\n```javascript\nconst greet = new Function('name', 'return `Hello, ${name}!`;');\n```\n\n**Key differences:**\n- Function declarations are hoisted\n- Arrow functions don't have their own 'this' context\n- Arrow functions can't be used as constructors"
  },
  {
    "id": "basic-5",
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their containing scope during compilation. This means you can use variables and functions before they are declared in the code.\n\n**Variable Hoisting:**\n```javascript\nconsole.log(x); // undefined (not ReferenceError)\nvar x = 5;\n\n// This is interpreted as:\nvar x;\nconsole.log(x); // undefined\nx = 5;\n```\n\n**Function Hoisting:**\n```javascript\nsayHello(); // \"Hello!\" (works fine)\n\nfunction sayHello() {\n  console.log(\"Hello!\");\n}\n```\n\n**let and const hoisting:**\n```javascript\nconsole.log(y); // ReferenceError: Cannot access 'y' before initialization\nlet y = 10;\n\nconsole.log(z); // ReferenceError: Cannot access 'z' before initialization\nconst z = 20;\n```\n\n**Note:** let and const are hoisted but remain in a \"Temporal Dead Zone\" until their declaration is reached."
  },
  {
    "id": "basic-6",
    "question": "What are arrays in JavaScript and how do you create them?",
    "answer": "Arrays in JavaScript are ordered lists of values that can store multiple elements of any data type. They are zero-indexed, meaning the first element is at index 0.\n\n**Creating Arrays:**\n```javascript\n// Array literal (most common)\nlet fruits = ['apple', 'banana', 'orange'];\n\n// Array constructor\nlet numbers = new Array(1, 2, 3, 4, 5);\n\n// Empty array\nlet empty = [];\nlet empty2 = new Array();\n\n// Array with specific length\nlet arr = new Array(5); // Creates array with 5 empty slots\n```\n\n**Common Array Methods:**\n```javascript\nlet arr = [1, 2, 3];\n\n// Add elements\narr.push(4);        // [1, 2, 3, 4]\narr.unshift(0);     // [0, 1, 2, 3, 4]\n\n// Remove elements\narr.pop();          // Removes last element\narr.shift();        // Removes first element\n\n// Access elements\nconsole.log(arr[0]); // First element\nconsole.log(arr.length); // Array length\n```"
  },
  {
    "id": "basic-7",
    "question": "What are objects in JavaScript?",
    "answer": "Objects in JavaScript are collections of key-value pairs where keys (properties) are strings or symbols, and values can be any data type including other objects.\n\n**Creating Objects:**\n```javascript\n// Object literal (most common)\nlet person = {\n  name: 'John',\n  age: 30,\n  city: 'New York'\n};\n\n// Object constructor\nlet person2 = new Object();\nperson2.name = 'Jane';\nperson2.age = 25;\n\n// Using Object.create()\nlet person3 = Object.create(null);\nperson3.name = 'Bob';\n```\n\n**Accessing Object Properties:**\n```javascript\n// Dot notation\nconsole.log(person.name); // 'John'\n\n// Bracket notation\nconsole.log(person['age']); // 30\n\n// Dynamic property access\nlet prop = 'city';\nconsole.log(person[prop]); // 'New York'\n```\n\n**Adding/Modifying Properties:**\n```javascript\nperson.email = 'john@example.com'; // Add new property\nperson.age = 31; // Modify existing property\n\n// Using bracket notation\nperson['phone'] = '123-456-7890';\n```"
  },
  {
    "id": "basic-8",
    "question": "What are conditional statements in JavaScript?",
    "answer": "Conditional statements allow you to execute different blocks of code based on different conditions.\n\n**1. if statement:**\n```javascript\nlet age = 18;\n\nif (age >= 18) {\n  console.log('You are an adult');\n}\n```\n\n**2. if...else statement:**\n```javascript\nif (age >= 18) {\n  console.log('You are an adult');\n} else {\n  console.log('You are a minor');\n}\n```\n\n**3. if...else if...else:**\n```javascript\nlet score = 85;\n\nif (score >= 90) {\n  console.log('Grade: A');\n} else if (score >= 80) {\n  console.log('Grade: B');\n} else if (score >= 70) {\n  console.log('Grade: C');\n} else {\n  console.log('Grade: F');\n}\n```\n\n**4. switch statement:**\n```javascript\nlet day = 'Monday';\n\nswitch (day) {\n  case 'Monday':\n    console.log('Start of work week');\n    break;\n  case 'Friday':\n    console.log('TGIF!');\n    break;\n  case 'Saturday':\n  case 'Sunday':\n    console.log('Weekend!');\n    break;\n  default:\n    console.log('Midweek');\n}\n```\n\n**5. Ternary operator:**\n```javascript\nlet result = age >= 18 ? 'Adult' : 'Minor';\n```"
  },
  {
    "id": "basic-9",
    "question": "What are loops in JavaScript?",
    "answer": "Loops allow you to execute a block of code repeatedly based on a condition.\n\n**1. for loop:**\n```javascript\nfor (let i = 0; i < 5; i++) {\n  console.log(i); // 0, 1, 2, 3, 4\n}\n```\n\n**2. while loop:**\n```javascript\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n```\n\n**3. do...while loop:**\n```javascript\nlet i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i < 5);\n```\n\n**4. for...in loop (for objects):**\n```javascript\nlet person = {name: 'John', age: 30, city: 'NYC'};\n\nfor (let key in person) {\n  console.log(key + ': ' + person[key]);\n}\n```\n\n**5. for...of loop (for iterables):**\n```javascript\nlet fruits = ['apple', 'banana', 'orange'];\n\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n```\n\n**6. Array methods (forEach, map, filter):**\n```javascript\nlet numbers = [1, 2, 3, 4, 5];\n\n// forEach\nnumbers.forEach(num => console.log(num));\n\n// map (creates new array)\nlet doubled = numbers.map(num => num * 2);\n\n// filter (creates new array)\nlet evens = numbers.filter(num => num % 2 === 0);\n```"
  },
  {
    "id": "basic-10",
    "question": "What is the difference between == and === in JavaScript?",
    "answer": "The difference between == and === lies in how they compare values:\n\n**== (Equality/Loose Equality):**\n- Compares values after type coercion\n- Converts operands to the same type before comparison\n- Can lead to unexpected results\n\n**=== (Strict Equality):**\n- Compares both value and type\n- No type coercion\n- Recommended for most comparisons\n\n**Examples:**\n```javascript\n// Loose equality (==)\nconsole.log(5 == '5');     // true (string '5' is converted to number)\nconsole.log(true == 1);    // true (true is converted to 1)\nconsole.log(false == 0);   // true (false is converted to 0)\nconsole.log(null == undefined); // true (special case)\nconsole.log('' == 0);      // true (empty string is converted to 0)\n\n// Strict equality (===)\nconsole.log(5 === '5');    // false (different types)\nconsole.log(true === 1);   // false (different types)\nconsole.log(false === 0);  // false (different types)\nconsole.log(null === undefined); // false (different types)\nconsole.log('' === 0);     // false (different types)\n\n// Same type comparisons\nconsole.log(5 === 5);      // true\nconsole.log('hello' === 'hello'); // true\n```\n\n**Best Practice:** Always use === and !== unless you specifically need type coercion."
  },
  {
    "id": "basic-11",
    "question": "What is the difference between null and undefined in JavaScript?",
    "answer": "Both `null` and `undefined` represent the absence of value, but they are used in different contexts:\n\n**undefined:**\n- Default value for declared but uninitialized variables\n- Return value of functions that don't explicitly return anything\n- Value of non-existent object properties\n- Value of function parameters that weren't passed\n\n**null:**\n- Intentional absence of any object value\n- Must be assigned explicitly\n- Represents \"no value\" or \"empty value\"\n\n**Examples:**\n```javascript\nlet a;\nconsole.log(a); // undefined\n\nlet b = null;\nconsole.log(b); // null\n\nfunction test() {}\nconsole.log(test()); // undefined\n\nlet obj = { name: 'John' };\nconsole.log(obj.age); // undefined\n\n// Type checking\nconsole.log(typeof undefined); // 'undefined'\nconsole.log(typeof null);      // 'object' (this is a known quirk)\n\n// Equality\nconsole.log(null == undefined);  // true (loose equality)\nconsole.log(null === undefined); // false (strict equality)\n```\n\n**Best Practices:**\n- Use `undefined` for uninitialized variables\n- Use `null` to intentionally represent \"no value\"\n- Always use strict equality (===) to distinguish between them"
  },
  {
    "id": "basic-12",
    "question": "How do you create and access object properties in JavaScript?",
    "answer": "There are multiple ways to create objects and access their properties in JavaScript:\n\n**Creating Objects:**\n\n**1. Object Literal (most common):**\n```javascript\nconst person = {\n  firstName: 'John',\n  lastName: 'Doe',\n  age: 30,\n  \"full name\": 'John Doe', // property with space\n  123: 'numeric property'\n};\n```\n\n**2. Constructor Function:**\n```javascript\nfunction Person(firstName, lastName, age) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n  this.age = age;\n}\n\nconst person = new Person('John', 'Doe', 30);\n```\n\n**3. Object.create():**\n```javascript\nconst personTemplate = {\n  greet: function() {\n    return `Hello, I'm ${this.name}`;\n  }\n};\n\nconst person = Object.create(personTemplate);\nperson.name = 'John';\n```\n\n**Accessing Properties:**\n\n**1. Dot Notation:**\n```javascript\nconsole.log(person.firstName); // 'John'\nconsole.log(person.age);       // 30\n```\n\n**2. Bracket Notation:**\n```javascript\nconsole.log(person['firstName']); // 'John'\nconsole.log(person['full name']); // 'John Doe'\nconsole.log(person[123]);          // 'numeric property'\n\n// Dynamic property access\nconst prop = 'age';\nconsole.log(person[prop]); // 30\n```\n\n**Adding/Modifying Properties:**\n```javascript\n// Adding new properties\nperson.email = 'john@example.com';\nperson['phone'] = '123-456-7890';\n\n// Modifying existing properties\nperson.age = 31;\nperson['firstName'] = 'Jonathan';\n```\n\n**Deleting Properties:**\n```javascript\ndelete person.email;\ndelete person['phone'];\n\nconsole.log(person.email); // undefined\n```"
  },
  {
    "id": "basic-13",
    "question": "What are JavaScript operators and their types?",
    "answer": "JavaScript operators are symbols that perform operations on operands (values and variables).\n\n**1. Arithmetic Operators:**\n```javascript\nlet a = 10, b = 3;\n\nconsole.log(a + b);  // 13 (Addition)\nconsole.log(a - b);  // 7  (Subtraction)\nconsole.log(a * b);  // 30 (Multiplication)\nconsole.log(a / b);  // 3.333... (Division)\nconsole.log(a % b);  // 1  (Modulus/Remainder)\nconsole.log(a ** b); // 1000 (Exponentiation)\n\n// Increment/Decrement\nlet x = 5;\nconsole.log(++x); // 6 (Pre-increment)\nconsole.log(x++); // 6 (Post-increment, then x becomes 7)\nconsole.log(--x); // 6 (Pre-decrement)\nconsole.log(x--); // 6 (Post-decrement, then x becomes 5)\n```\n\n**2. Comparison Operators:**\n```javascript\nconsole.log(5 == '5');   // true (loose equality)\nconsole.log(5 === '5');  // false (strict equality)\nconsole.log(5 != '5');   // false (loose inequality)\nconsole.log(5 !== '5');  // true (strict inequality)\nconsole.log(5 > 3);      // true\nconsole.log(5 < 3);      // false\nconsole.log(5 >= 5);     // true\nconsole.log(5 <= 3);     // false\n```\n\n**3. Logical Operators:**\n```javascript\nlet isTrue = true;\nlet isFalse = false;\n\nconsole.log(isTrue && isFalse);  // false (AND)\nconsole.log(isTrue || isFalse);  // true (OR)\nconsole.log(!isTrue);            // false (NOT)\n\n// Short-circuit evaluation\nconsole.log(false && \"won't execute\"); // false\nconsole.log(true || \"won't execute\");   // true\n```\n\n**4. Assignment Operators:**\n```javascript\nlet x = 10;\n\nx += 5;  // x = x + 5, now x = 15\nx -= 3;  // x = x - 3, now x = 12\nx *= 2;  // x = x * 2, now x = 24\nx /= 4;  // x = x / 4, now x = 6\nx %= 5;  // x = x % 5, now x = 1\nx **= 3; // x = x ** 3, now x = 1\n```\n\n**5. Bitwise Operators:**\n```javascript\nlet a = 5;  // 101 in binary\nlet b = 3;  // 011 in binary\n\nconsole.log(a & b);  // 1 (AND)\nconsole.log(a | b);  // 7 (OR)\nconsole.log(a ^ b);  // 6 (XOR)\nconsole.log(~a);     // -6 (NOT)\nconsole.log(a << 1); // 10 (Left shift)\nconsole.log(a >> 1); // 2 (Right shift)\n```\n\n**6. Other Operators:**\n```javascript\n// Ternary operator\nlet age = 18;\nlet status = age >= 18 ? 'adult' : 'minor';\n\n// typeof operator\nconsole.log(typeof 42);        // 'number'\nconsole.log(typeof 'hello');   // 'string'\nconsole.log(typeof true);      // 'boolean'\n\n// instanceof operator\nlet arr = [1, 2, 3];\nconsole.log(arr instanceof Array); // true\n\n// in operator\nlet obj = { name: 'John', age: 30 };\nconsole.log('name' in obj); // true\nconsole.log('email' in obj); // false\n```"
  },
  {
    "id": "basic-14",
    "question": "What is type coercion in JavaScript?",
    "answer": "Type coercion is JavaScript's automatic conversion of values from one data type to another during operations.\n\n**Implicit Coercion (Automatic):**\n\n**String Coercion:**\n```javascript\n// + operator with strings\nconsole.log('5' + 3);      // '53' (number 3 becomes string '3')\nconsole.log('Hello' + 5);  // 'Hello5'\nconsole.log(true + '');    // 'true'\nconsole.log(null + '');    // 'null'\nconsole.log(undefined + ''); // 'undefined'\n```\n\n**Number Coercion:**\n```javascript\n// Arithmetic operators (except +)\nconsole.log('5' - 3);      // 2 (string '5' becomes number 5)\nconsole.log('10' * '2');   // 20\nconsole.log('15' / '3');   // 5\nconsole.log('10' % '3');   // 1\n\n// Unary + operator\nconsole.log(+'123');       // 123\nconsole.log(+true);        // 1\nconsole.log(+false);       // 0\nconsole.log(+null);        // 0\nconsole.log(+undefined);   // NaN\n```\n\n**Boolean Coercion:**\n```javascript\n// Falsy values (convert to false)\nconsole.log(Boolean(false));     // false\nconsole.log(Boolean(0));         // false\nconsole.log(Boolean(-0));        // false\nconsole.log(Boolean(0n));        // false (BigInt)\nconsole.log(Boolean(''));        // false\nconsole.log(Boolean(null));      // false\nconsole.log(Boolean(undefined)); // false\nconsole.log(Boolean(NaN));       // false\n\n// Truthy values (convert to true)\nconsole.log(Boolean('hello'));   // true\nconsole.log(Boolean(1));         // true\nconsole.log(Boolean([]));        // true (empty array)\nconsole.log(Boolean({}));        // true (empty object)\n```\n\n**Comparison Coercion:**\n```javascript\n// Loose equality (==) performs coercion\nconsole.log(5 == '5');         // true\nconsole.log(true == 1);        // true\nconsole.log(false == 0);       // true\nconsole.log(null == undefined); // true\nconsole.log('' == 0);          // true\n\n// Strict equality (===) does not perform coercion\nconsole.log(5 === '5');         // false\nconsole.log(true === 1);        // false\nconsole.log(false === 0);       // false\nconsole.log(null === undefined); // false\n```\n\n**Explicit Coercion (Manual):**\n```javascript\n// To String\nlet num = 123;\nconsole.log(String(num));     // '123'\nconsole.log(num.toString());  // '123'\nconsole.log('' + num);        // '123'\n\n// To Number\nlet str = '456';\nconsole.log(Number(str));     // 456\nconsole.log(+str);            // 456\nconsole.log(parseInt(str));   // 456\nconsole.log(parseFloat(str)); // 456\n\n// To Boolean\nlet value = 'hello';\nconsole.log(Boolean(value));  // true\nconsole.log(!!value);         // true (double negation)\n```\n\n**Common Gotchas:**\n```javascript\nconsole.log([] + []);         // '' (empty string)\nconsole.log([] + {});         // '[object Object]'\nconsole.log({} + []);         // 0 (in some contexts)\nconsole.log('2' + '3');       // '23'\nconsole.log('2' - '3');       // -1\nconsole.log(true + true);     // 2\nconsole.log(true + false);    // 1\n```\n\n**Best Practices:**\n- Use strict equality (===) instead of loose equality (==)\n- Be explicit about type conversions when possible\n- Understand truthy and falsy values\n- Use proper conversion functions (Number(), String(), Boolean())"
  },
  {
    "id": "basic-15",
    "question": "What are template literals in JavaScript?",
    "answer": "Template literals (template strings) are a way to create strings using backticks (`) instead of quotes. They provide powerful features for string manipulation and formatting.\n\n**Basic Syntax:**\n```javascript\n// Regular string\nconst regularString = 'Hello World';\n\n// Template literal\nconst templateString = `Hello World`;\n\nconsole.log(templateString); // 'Hello World'\n```\n\n**String Interpolation:**\n```javascript\nconst name = 'John';\nconst age = 30;\n\n// Old way (concatenation)\nconst oldWay = 'Hello, my name is ' + name + ' and I am ' + age + ' years old.';\n\n// Template literal way\nconst newWay = `Hello, my name is ${name} and I am ${age} years old.`;\n\nconsole.log(newWay); // 'Hello, my name is John and I am 30 years old.'\n```\n\n**Expression Evaluation:**\n```javascript\nconst a = 5;\nconst b = 10;\n\nconsole.log(`Sum: ${a + b}`);              // 'Sum: 15'\nconsole.log(`Product: ${a * b}`);          // 'Product: 50'\nconsole.log(`Is a > b? ${a > b}`);         // 'Is a > b? false'\nconsole.log(`Random: ${Math.random()}`);   // 'Random: 0.123...'\n```\n\n**Multi-line Strings:**\n```javascript\n// Old way (with concatenation)\nconst oldMultiline = 'This is line 1\\n' +\n                    'This is line 2\\n' +\n                    'This is line 3';\n\n// Template literal way\nconst newMultiline = `This is line 1\nThis is line 2\nThis is line 3`;\n\n// Even better - actual line breaks\nconst betterMultiline = `\n  This is line 1\n  This is line 2\n  This is line 3\n`;\n\nconsole.log(betterMultiline);\n```\n\n**HTML Templates:**\n```javascript\nconst user = {\n  name: 'Alice',\n  email: 'alice@example.com',\n  avatar: 'avatar.jpg'\n};\n\nconst htmlTemplate = `\n  <div class=\"user-card\">\n    <img src=\"${user.avatar}\" alt=\"${user.name}\">\n    <h2>${user.name}</h2>\n    <p>Email: ${user.email}</p>\n    <p>Joined: ${new Date().getFullYear()}</p>\n  </div>\n`;\n\ndocument.body.innerHTML = htmlTemplate;\n```\n\n**Nested Template Literals:**\n```javascript\nconst users = [\n  { name: 'John', age: 30 },\n  { name: 'Jane', age: 25 },\n  { name: 'Bob', age: 35 }\n];\n\nconst userList = `\n  <ul>\n    ${users.map(user => `\n      <li>${user.name} (${user.age} years old)</li>\n    `).join('')}\n  </ul>\n`;\n\nconsole.log(userList);\n```\n\n**Function Calls in Templates:**\n```javascript\nfunction formatDate(date) {\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n}\n\nfunction greetUser(name, isVip = false) {\n  return `${isVip ? 'Welcome VIP' : 'Welcome'} ${name}!`;\n}\n\nconst today = new Date();\nconst username = 'Sarah';\nconst isVipUser = true;\n\nconst message = `\n  ${greetUser(username, isVipUser)}\n  Today is ${formatDate(today)}.\n  Have a great day!\n`;\n\nconsole.log(message);\n```\n\n**Tagged Template Literals (Advanced):**\n```javascript\nfunction highlight(strings, ...values) {\n  return strings.reduce((result, string, i) => {\n    const value = values[i] ? `<mark>${values[i]}</mark>` : '';\n    return result + string + value;\n  }, '');\n}\n\nconst name = 'JavaScript';\nconst feature = 'template literals';\n\nconst highlighted = highlight`Learning ${name} ${feature} is fun!`;\nconsole.log(highlighted);\n// 'Learning <mark>JavaScript</mark> <mark>template literals</mark> is fun!'\n```\n\n**Benefits of Template Literals:**\n- Cleaner syntax for string interpolation\n- Support for multi-line strings\n- Expression evaluation inside strings\n- Better readability for complex strings\n- No need for string concatenation\n- Preserve formatting and indentation"
  }
]
